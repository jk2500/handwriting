"""Update JobStatus enum and Job model fields for segmentation workflow

Revision ID: 02e3a785d33e
Revises: 01c8134a237c
Create Date: 2025-04-30 06:23:31.061600

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '02e3a785d33e'
down_revision: Union[str, None] = '01c8134a237c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Enum type name (usually lowercase tablename + _ + column name)
job_status_enum_name = 'jobstatus'
# Old values (Exact case from DB)
old_db_values = ('PENDING', 'RENDERING', 'PROCESSING_VLM', 'COMPILING', 'COMPLETED', 'FAILED')
# New values (Exact case for DB)
new_db_values = ('PENDING', 'RENDERING', 'PROCESSING_VLM', 'AWAITING_SEGMENTATION', 'SEGMENTATION_COMPLETE', 'COMPILATION_PENDING', 'COMPILATION_COMPLETE', 'FAILED')
# New values (Lowercase for Python code - kept for reference/clarity)
new_python_values = ('pending', 'rendering', 'processing_vlm', 'awaiting_segmentation', 'segmentation_complete', 'compilation_pending', 'compilation_complete', 'failed')


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('jobs', sa.Column('initial_tex_s3_path', sa.String(), nullable=True))
    op.add_column('jobs', sa.Column('final_tex_s3_path', sa.String(), nullable=True))
    op.add_column('jobs', sa.Column('final_pdf_s3_path', sa.String(), nullable=True))
    op.drop_column('jobs', 'output_tex_s3_path')
    op.drop_column('jobs', 'output_pdf_s3_path')
    # ### end Alembic commands ###

    # ### Manually added commands for Enum Type update ###
    # 1. Rename 'COMPILING' to 'AWAITING_SEGMENTATION' (Using DB case)
    op.execute(f"ALTER TYPE {job_status_enum_name} RENAME VALUE 'COMPILING' TO 'AWAITING_SEGMENTATION'")

    # 2. Add new statuses - Add 'SEGMENTATION_COMPLETE' (Using DB case)
    op.execute(f"ALTER TYPE {job_status_enum_name} ADD VALUE 'SEGMENTATION_COMPLETE' AFTER 'AWAITING_SEGMENTATION'")
    # 3. Add 'COMPILATION_PENDING' (Using DB case)
    op.execute(f"ALTER TYPE {job_status_enum_name} ADD VALUE 'COMPILATION_PENDING' AFTER 'SEGMENTATION_COMPLETE'")
    # 4. Add 'COMPILATION_COMPLETE' (Using DB case)
    op.execute(f"ALTER TYPE {job_status_enum_name} ADD VALUE 'COMPILATION_COMPLETE' AFTER 'COMPILATION_PENDING'")
    # Note: We are leaving 'COMPLETED' as is. If it needs removal, it's complex and requires data migration first.
    # ### End manually added commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('jobs', sa.Column('output_pdf_s3_path', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('output_tex_s3_path', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('jobs', 'final_pdf_s3_path')
    op.drop_column('jobs', 'final_tex_s3_path')
    op.drop_column('jobs', 'initial_tex_s3_path')
    # ### end Alembic commands ###

    # ### Manually added commands for Enum Type downgrade ###
    # WARNING: Downgrading ENUM types is tricky and potentially data-lossy if new values are in use.
    #          Postgres doesn't easily allow removing enum values.
    #          This downgrade attempts to rename back, but doesn't remove added values.

    # 1. Rename 'AWAITING_SEGMENTATION' back to 'COMPILING' (Using DB case)
    op.execute(f"ALTER TYPE {job_status_enum_name} RENAME VALUE 'AWAITING_SEGMENTATION' TO 'COMPILING'")

    # Note: We cannot safely remove 'SEGMENTATION_COMPLETE', 'COMPILATION_PENDING', 'COMPILATION_COMPLETE'
    #       in a downgrade without potentially breaking existing data or requiring complex data checks/updates.
    # ### End manually added commands ###
