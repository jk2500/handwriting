#!/usr/bin/env python3
"""
crop_diagrams.py
────────────────
Crops diagram regions from an image based on bounding box data provided in a 
JSON file (typically generated by Segmenter.py or a similar process).

Usage
~~~~~
python crop_diagrams.py \\
        --json final_diagrams.json \\
        --image proposal_figure_3_page0.png \\
        --out-dir cropped_diagrams/
"""

import json
import argparse
import pathlib
import re
from PIL import Image

def main(args):
    """Loads data, performs cropping, and saves images."""
    json_path = pathlib.Path(args.json)
    image_path = pathlib.Path(args.image)
    out_dir = pathlib.Path(args.out_dir)

    # --- Input Validation ---
    if not json_path.is_file():
        raise FileNotFoundError(f"JSON file not found: {json_path}")
    if not image_path.is_file():
        raise FileNotFoundError(f"Image file not found: {image_path}")

    # --- Load Data ---
    try:
        with open(json_path, 'r') as f:
            data = json.load(f)
    except json.JSONDecodeError:
        raise ValueError(f"Could not decode JSON from: {json_path}")

    if "diagrams" not in data or not isinstance(data["diagrams"], list):
        raise ValueError(f"JSON file must contain a 'diagrams' list. Found keys: {list(data.keys())}")

    print(f"Loaded {len(data['diagrams'])} diagram entries from {json_path}")

    # --- Load Image ---
    try:
        img = Image.open(image_path)
        # Ensure image is in a format that supports saving as PNG (e.g., RGB, RGBA)
        if img.mode not in ('RGB', 'RGBA', 'L'): # L is grayscale
             print(f"Warning: Image mode is {img.mode}. Converting to RGB for cropping.")
             img = img.convert('RGB')
    except Exception as e:
        raise IOError(f"Could not load image file: {image_path}. Error: {e}")

    # --- Create Output Directory ---
    out_dir.mkdir(parents=True, exist_ok=True)
    print(f"Ensured output directory exists: {out_dir}")

    # --- Crop and Save Diagrams ---
    cropped_count = 0
    for i, diagram_info in enumerate(data["diagrams"]):
        if "placeholder" not in diagram_info or "bounding_box" not in diagram_info:
            print(f"Warning: Skipping diagram entry {i+1} due to missing 'placeholder' or 'bounding_box'.")
            continue

        placeholder = diagram_info["placeholder"]
        bbox = diagram_info["bounding_box"]

        # Validate bounding box
        if not (isinstance(bbox, list) and len(bbox) == 4 and all(isinstance(coord, int) for coord in bbox)):
            print(f"Warning: Skipping diagram '{placeholder}' due to invalid bounding_box format: {bbox}")
            continue

        # Generate filename from placeholder (e.g., "<<DIAGRAM_1>>" -> "diagram_1.png")
        match = re.search(r'(\d+)', placeholder)
        if not match:
            print(f"Warning: Could not extract number from placeholder '{placeholder}'. Using index {i+1} for filename.")
            filename = f"diagram_{i+1}.png"
        else:
            filename = f"diagram_{match.group(1)}.png"

        output_path = out_dir / filename

        # Perform cropping
        try:
            # Pillow's crop uses (left, upper, right, lower)
            cropped_img = img.crop(bbox)
            cropped_img.save(output_path, "PNG")
            print(f"Saved cropped diagram to: {output_path}")
            cropped_count += 1
        except Exception as e:
            print(f"Error cropping or saving diagram '{placeholder}' with bbox {bbox}: {e}")

    print(f"\nSuccessfully cropped and saved {cropped_count} diagrams to {out_dir}.")

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Crop diagrams from an image based on JSON data.")
    p.add_argument("--json", required=True, help="Path to the input JSON file containing bounding boxes.")
    p.add_argument("--image", required=True, help="Path to the original image file.")
    p.add_argument("--out-dir", required=True, help="Directory to save the cropped diagram images.")
    args = p.parse_args()
    main(args) 